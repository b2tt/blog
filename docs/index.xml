<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Perham</title>
    <link>https://www.mikeperham.com</link>
    <description>Latest content from Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mperham@gmail.com (Mike Perham)</managingEditor>
    <webMaster>mperham@gmail.com (Mike Perham)</webMaster>
    <lastBuildDate>Mon, 05 Feb 2018 09:00:00 -0800</lastBuildDate>
    <atom:link href="https://www.mikeperham.com/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Happy 6th Birthday, Sidekiq</title>
      <link>https://www.mikeperham.com/2018/02/05/happy-6th-birthday-sidekiq/</link>
      <pubDate>Mon, 05 Feb 2018 09:00:00 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/02/05/happy-6th-birthday-sidekiq/</guid>
      <description>

&lt;div style=&#34;float: right; padding-left: 10px&#34;&gt;
&lt;figure&gt;&lt;img src=&#34;//www.mikeperham.com/images/sidekiq.png&#34; width=&#34;400&#34;/&gt;&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;./2012/02/07/sidekiq-simple-efficient-messaging-for-rails/&#34;&gt;Six years ago I shipped Sidekiq v0.5.0&lt;/a&gt; and changed my life.
I talked to some developers recently:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I had been working in Go for a while but I kept coming back to Ruby
because Sidekiq makes everything so fast and easy to scale.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is my recipe for success.
Sell a product developers want because it makes their job so much easier.
You don&#39;t need a sales force when developers evangelize your product to every new company they join.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My favorite quote from this AMA (with which I wholeheartedly agree) is in regards to Sidekiq: “... rarely does infrastructure so keenly understand what developers, infrastructure engineers, and operators will want out of it.” &lt;a href=&#34;https://twitter.com/mperham?ref_src=twsrc%5Etfw&#34;&gt;@mperham&lt;/a&gt; &lt;a href=&#34;https://t.co/RCdG9gwtDV&#34;&gt;https://t.co/RCdG9gwtDV&lt;/a&gt;&lt;/p&gt;&amp;mdash; John K Sawers (@johnksawers) &lt;a href=&#34;https://twitter.com/johnksawers/status/959604621181366272?ref_src=twsrc%5Etfw&#34;&gt;February 3, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;2017 revenue was right on target, about 40% higher YoY.
Nice, steady organic growth with little marketing on my part.
Why burn yourself out chasing arbitrary growth targets from investors?
Profitable?  Yes.  Growing?  Yes.
Irie, mon.&lt;/p&gt;

&lt;h2 id=&#34;today-is-a-big-day&#34;&gt;Today is a BIG DAY!&lt;/h2&gt;

&lt;p&gt;I&#39;m shipping several releases today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sidekiq 5.1 now has global job death handlers and enables the ActiveRecord query cache by default.
&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/Changes.md#510&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sidekiq Pro 4.0 removes deprecated APIs and adds a new &lt;strong&gt;experimental&lt;/strong&gt; feature: batch death.
Now if a batch job dies, it marks the entire batch as dead also (since it will never succeed).
New APIs allow you to enumerate dead Batches.
Feedback is requested here, is it useful?
What further refinements would you like to see?
&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/Pro-Changes.md#400&#34;&gt;Pro Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sidekiq Enterprise 1.7 adds support for &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Ent-Rolling-Restarts&#34;&gt;&lt;strong&gt;long-running jobs and rolling restarts&lt;/strong&gt;&lt;/a&gt;.
Signal USR2 and a Sidekiq process will gracefully exit once all jobs are complete, even if those jobs take hours to complete.
This has been a hugely requested feature and it took me a while to figure out how to implement it.
&lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/Ent-Changes.md#180&#34;&gt;Ent Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&#34;float: right; padding-left: 10px&#34;&gt;
&lt;div class=&#34;panel panel-danger&#34;&gt;
  &lt;div class=&#34;panel-heading&#34;&gt;
    &lt;h2 class=&#34;panel-title&#34;&gt;&lt;b&gt;Gotta have it?&lt;/b&gt;&lt;/h2&gt;
  &lt;/div&gt;
  &lt;div class=&#34;panel-body&#34;&gt;
    &lt;p&gt;
      Purchase Sidekiq Pro or Sidekiq Enterprise at &lt;a href=&#34;https://sidekiq.org&#34;&gt;sidekiq.org&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;One of my goals for this year is to slow the rate of releases.
There were 12 Sidekiq releases last year but it&#39;s been 4 months since Sidekiq 5.0.5 was released.
Ideally I want quarterly maintenance releases.&lt;/p&gt;

&lt;p&gt;Lately my biggest problem has been Gmail&#39;s Spam folder.  For the last
month or two, a very high
percentage of customer receipts and welcome emails are winding up in the
Spam folder for some reason, despite me sending a very low daily volume from
my own email account. I can&#39;t explain it or debug it and feel pretty
powerless. Any email delivery wizards have ideas? My email is in the footer.&lt;/p&gt;

&lt;h2 id=&#34;faktory&#34;&gt;Faktory&lt;/h2&gt;

&lt;p&gt;I also introduced &lt;a href=&#34;http://contribsys.com/faktory/&#34;&gt;Faktory&lt;/a&gt; last year.
This is the first step in my long-term plan to bring Sidekiq goodness to all programming languages.
I&#39;ll be working on Faktory Enterprise over the next few months and hopefully have it for sale by the end of 2018.&lt;/p&gt;

&lt;h2 id=&#34;more-information&#34;&gt;More Information&lt;/h2&gt;

&lt;p&gt;Many, many people have asked me questions about sustainable open source
and following a similar path with their project.
The &lt;a href=&#34;https://www.indiehackers.com/businesses/sidekiq&#34;&gt;Indiehackers interview&lt;/a&gt; I did a year ago proved extremely popular and resonanated with many people.
Want to discuss more, ask questions?
Got an open source project you want to make sustainable?
Stop by my weekly &lt;a href=&#34;https://sidekiq.org/support.html&#34;&gt;Happy Hour&lt;/a&gt; and let&#39;s chat.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faktory 0.7.0 Released</title>
      <link>https://www.mikeperham.com/2018/01/08/faktory-0.7.0-released/</link>
      <pubDate>Mon, 08 Jan 2018 10:53:00 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2018/01/08/faktory-0.7.0-released/</guid>
      <description>

&lt;p&gt;Faktory is my brand-new background job system for every programming language.
If you want to learn more, see &lt;a href=&#34;http://www.mikeperham.com/2017/10/24/introducing-faktory/&#34;&gt;the intro&lt;/a&gt;.
It&#39;s been three months since the initial launch in October and I&#39;ve heard of several successful rollouts to production.
If you were reluctant to try out Faktory before, it&#39;s time to start looking into it because
the biggest release of Faktory yet is now available to all.
November and December saw lots of changes and improvements; here&#39;s a recap.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;float: right; padding: 3px&#34; src=&#34;http://www.mikeperham.com/images/faktory-logo.png&#34; alt=&#34;logo&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;job-priorities&#34;&gt;Job Priorities&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jobs can now be prioritized from 1-9 within a queue!&lt;/strong&gt;
The initial release of Faktory was focused on replicating Sidekiq&#39;s existing functionality but Faktory&#39;s different architecture allows us to implement features that were impossible in Sidekiq.
Many, many people have asked for a simple job prioritization scheme but I&#39;ve never implemented it in Sidekiq because of the high runtime cost.
But since we now control the low-level storage details in Faktory, we can minimize those costs!
Want something to go to the front of a queue, give it a high priority like 9.
Want it to drop to the back?
Simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &amp;quot;jobtype&amp;quot;:&amp;quot;MyJob&amp;quot;,&amp;quot;args&amp;quot;:[1,2,3],&amp;quot;queue&amp;quot;:&amp;quot;encoding&amp;quot;,&amp;quot;priority&amp;quot;:1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@andrewstucki did the hard work to design an efficient implementation using a data structure I&#39;d never heard of: the &lt;a href=&#34;https://en.wikipedia.org/wiki/Brodal_queue&#34;&gt;Brodal queue&lt;/a&gt;.
Nice to see some real Computer Science data structure theory paying off here!&lt;/p&gt;

&lt;h2 id=&#34;reliability&#34;&gt;Reliability&lt;/h2&gt;

&lt;p&gt;Recovered jobs (jobs which kill their worker process, aka poison pills) now use the retry process.
This ensures that recovered jobs are exponentially backed off and won&#39;t retry every 30 minutes forever as before.&lt;/p&gt;

&lt;p&gt;Faktory now automatically creates backups every hour when in production mode, keeping 24.
This gives you a full day of backups to recover in case of disaster.&lt;/p&gt;

&lt;p&gt;Note #1: remember that Faktory is a queue system and queues are normally empty.
It is typical for Faktory&#39;s dataset to be less than 10MB in size unless you are scheduling or retrying lots of jobs.&lt;/p&gt;

&lt;p&gt;Note #2: background jobs will run &lt;strong&gt;at least&lt;/strong&gt; once.
Restoring a backup is one way to see duplicate job execution.
You should always strive for &lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Best-Practices#2-make-your-job-idempotent-and-transactional&#34;&gt;idempotency&lt;/a&gt; when writing jobs.&lt;/p&gt;

&lt;h2 id=&#34;newsletter&#34;&gt;Newsletter&lt;/h2&gt;

&lt;p&gt;I&#39;ve created a newsletter for those who want the latest news ASAP.
Subscribers will get Faktory-related posts like this a day early.
You can subscribe right here or on the &lt;a href=&#34;http://contribsys.com/faktory/&#34;&gt;Faktory home page&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;

&lt;p&gt;&lt;link href=&#34;//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt;
&lt;style type=&#34;text/css&#34;&gt;
    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
&lt;/style&gt;
&lt;div id=&#34;mc_embed_signup&#34;&gt;
&lt;form action=&#34;https://contribsys.us17.list-manage.com/subscribe/post?u=c04c3b4f7f54b0a65d156c7e4&amp;amp;id=e3d75d426c&#34; method=&#34;post&#34; id=&#34;mc-embedded-subscribe-form&#34; name=&#34;mc-embedded-subscribe-form&#34; class=&#34;validate&#34; target=&#34;_blank&#34; novalidate&gt;
    &lt;div id=&#34;mc_embed_signup_scroll&#34;&gt;
    &lt;label for=&#34;mce-EMAIL&#34;&gt;Subscribe to Faktory Insiders&lt;/label&gt;
    &lt;input type=&#34;email&#34; value=&#34;&#34; name=&#34;EMAIL&#34; class=&#34;email&#34; id=&#34;mce-EMAIL&#34; placeholder=&#34;email address&#34; required&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&#34;position: absolute; left: -5000px;&#34; aria-hidden=&#34;true&#34;&gt;&lt;input type=&#34;text&#34; name=&#34;b_c04c3b4f7f54b0a65d156c7e4_e3d75d426c&#34; tabindex=&#34;-1&#34; value=&#34;&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;clear&#34;&gt;&lt;input type=&#34;submit&#34; value=&#34;Subscribe&#34; name=&#34;subscribe&#34; id=&#34;mc-embedded-subscribe&#34; class=&#34;button&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;&lt;/p&gt;

&lt;h2 id=&#34;faktory-as-a-service&#34;&gt;Faktory-as-a-Service&lt;/h2&gt;

&lt;p&gt;Two different companies have sprung up, aimed at providing Faktory as a service.
If you have an application on Heroku, you can start using Faktory in minutes!
Check out &lt;a href=&#34;https://www.ackfoundry.com/&#34;&gt;Ackfoundry&lt;/a&gt; and &lt;a href=&#34;http://konglomerate.io/&#34;&gt;Konglomerate&lt;/a&gt; for the latest details.&lt;/p&gt;

&lt;h2 id=&#34;worker-packages&#34;&gt;Worker Packages&lt;/h2&gt;

&lt;p&gt;Several Faktory &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Related-Projects&#34;&gt;worker packages&lt;/a&gt; are seeing solid support and regular improvements.
Take a look at the Rust, Elixir, Python and Node packages for example.&lt;/p&gt;

&lt;p&gt;Don&#39;t see one for your language?
Jump into the &lt;a href=&#34;https://gitter.im/contribsys/faktory&#34;&gt;chatroom&lt;/a&gt; and ask!&lt;/p&gt;

&lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;

&lt;p&gt;Faktory&#39;s security design has been one of the toughest engineering problems to solve.
By default we want both an easy development experience and a secure production deployment.
To that end, we&#39;ve made several major &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Security&#34;&gt;security policy&lt;/a&gt; changes:&lt;/p&gt;

&lt;h3 id=&#34;faktory-will-not-terminate-tls&#34;&gt;Faktory will not terminate TLS&lt;/h3&gt;

&lt;p&gt;Since most deployments these days are using Docker or another container, we&#39;ve decided the Faktory server will not terminate TLS.
Instead your network architecture should provide any necessary TLS frontend using haproxy, spiped, stunnel, nginx, etc.&lt;/p&gt;

&lt;p&gt;Faktory clients will all continue to support TLS by including &amp;quot;tls&amp;quot; in the URL scheme, e.g. &lt;code&gt;tcp+tls://faktory.example.com:7419&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;passwords-are-mandatory-in-production&#34;&gt;Passwords are mandatory in production&lt;/h3&gt;

&lt;p&gt;Faktory is one of the few pieces of infrastructure which bake in the idea of &amp;quot;environment&amp;quot; (production and development are the two choices).
Going forward, a production server must be started with a FAKTORY_PASSWORD environment variable in order to authenticate all connections.&lt;/p&gt;

&lt;p&gt;It&#39;s easy to include the password in the connection URL: &lt;code&gt;tcp+tls://:mypassword123@faktory.example.com:7419&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;csrf-protection&#34;&gt;CSRF protection&lt;/h3&gt;

&lt;p&gt;@vosmith was nice enough to provide a pull request adding CSRF protection to the Web UI.
CSRF protection prevents a malicious webpage from using your browser to submit a form request, e.g. to clear a queue.
Further security improvements to the Web UI are always welcome.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&#39;s it for now!
&lt;a href=&#34;https://gitter.im/contribsys/faktory&#34;&gt;Jump into the chatroom&lt;/a&gt; if you have questons or concerns.
And as I said before, I&#39;ve heard of several successful rollouts to production.
If you were reluctant to try out Faktory before, it&#39;s time to start looking into it!
See my &lt;a href=&#34;http://www.mikeperham.com/2017/11/13/getting-started-with-faktory/&#34;&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sidekiq Pro Statsd support -- new and improved!</title>
      <link>https://www.mikeperham.com/2017/12/11/sidekiq-pro-statsd-support----new-and-improved/</link>
      <pubDate>Mon, 11 Dec 2017 12:45:07 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2017/12/11/sidekiq-pro-statsd-support----new-and-improved/</guid>
      <description>

&lt;div style=&#34;float: right; padding-left: 10px&#34;&gt;
&lt;figure&gt;
&lt;img src=&#34;//www.mikeperham.com/images/statsd.png&#34;/&gt;
&lt;figcaption&gt;&lt;small&gt;Drivy&#39;s impressive Sidekiq dashboard [&lt;a href=&#34;https://drivy.engineering/sidekiq-instrumentation/&#34;&gt;source&lt;/a&gt;]&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Several customers have been asking for more metrics to track Sidekiq
internals: when is a job dropped due to uniqueness or expiration?  I&#39;ve
had to put off the work while working on
&lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt; but recently I took a week off
to focus on Sidekiq and implement this feature.&lt;/p&gt;

&lt;h2 id=&#34;new-and-improved&#34;&gt;New and Improved&lt;/h2&gt;

&lt;p&gt;Sidekiq Pro 3.6 has a brand new Statsd metrics subsystem.  Statsd is a
de facto universal standard for metrics in open source software, created by Etsy.  Even if you
use another system like InfluxDB, Prometheus or Datadog, every
metrics system will have an adapter or proxy to convert Statsd
metrics into their own internal format.&lt;/p&gt;

&lt;p&gt;You plug in the Statsd client in your initializer and Sidekiq Pro will add metrics:&lt;/p&gt;

&lt;div style=&#34;clear: both&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd-ruby&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Pro&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;statsd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{ &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Statsd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8125&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;) }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that it&#39;s a Proc; Sidekiq Pro uses a connection pool with several clients so a
single global client doesn&#39;t become a source of thread and socket contention.&lt;/p&gt;

&lt;h2 id=&#34;more-metrics&#34;&gt;More Metrics&lt;/h2&gt;

&lt;p&gt;Sidekiq Pro now publishes several new metrics:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jobs.expired - when a job is expired
jobs.recovered.push - when a job is recovered by reliable_push after a network outage
jobs.recovered.fetch - when a job is recovered by super_fetch after a process crash
batch.created - when a batch is created
batch.complete - when a batch is completed
batch.success - when a batch is successful
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Future versions of Sidekiq Enterprise will also publish more metrics
based on their features.  A sample:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jobs.periodic.created - enqueued a cron job
leader.election - Sidekiq cluster changed leadership
jobs.duplicate - a job was not enqueued because it was not unique
jobs.duplicate.$WorkerClassName - metric with the worker&#39;s class name included, for debugging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this, your operations dashboards should be more useful than ever.
Want more metrics?  &lt;a href=&#34;https://github.com/mperham/sidekiq/issues/new&#34;&gt;Open an issue!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Faktory</title>
      <link>https://www.mikeperham.com/2017/11/13/getting-started-with-faktory/</link>
      <pubDate>Mon, 13 Nov 2017 08:25:10 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2017/11/13/getting-started-with-faktory/</guid>
      <description>

&lt;p&gt;When I &lt;a href=&#34;//www.mikeperham.com/2017/10/24/introducing-faktory/&#34;&gt;unveiled my new background job
system&lt;/a&gt; Faktory
three weeks ago, I didn&#39;t have an easy path for people to install and
try Faktory themselves.  Now there is; let&#39;s get it running!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//www.mikeperham.com/images/faktory-logo.png&#34; alt=&#34;faktory&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;homebrew&#34;&gt;Homebrew&lt;/h2&gt;

&lt;p&gt;If you are running macOS, it&#39;s installable with Homebrew:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; brew tap contribsys/faktory
&amp;gt; brew install faktory
...two minutes pass...
&amp;gt; faktory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open your browser to &lt;a href=&#34;http://localhost:7420&#34;&gt;http://localhost:7420&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;If you have Docker, it&#39;s easy to pull an image:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;docker pull contribsys/faktory:latest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The command to run it is rather involved, &lt;a href=&#34;https://hub.docker.com/r/contribsys/faktory/&#34;&gt;see the description&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;workers&#34;&gt;Workers&lt;/h2&gt;

&lt;p&gt;Faktory is only one half of the puzzle, now you need to install a worker
package which can execute jobs that are pushed to Faktory.  I launched
Faktory with Ruby and Go worker packages, now there are a half dozen
libraries for other languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory_worker_ruby&#34;&gt;faktory_worker_ruby&lt;/a&gt; - Ruby&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/contribsys/faktory_worker_go&#34;&gt;faktory_worker_go&lt;/a&gt; - Go&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cdrx/faktory_worker_python&#34;&gt;faktory_worker_python&lt;/a&gt; - Python&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/basekit/faktory_worker_php&#34;&gt;faktory_worker_php&lt;/a&gt; - PHP&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jonhoo/faktory-rs&#34;&gt;faktory-rs&lt;/a&gt; - Rust&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cjbottaro/faktory_worker_ex&#34;&gt;faktory_worker_ex&lt;/a&gt; - Elixir&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jbielick/faktory_worker_node&#34;&gt;faktory_worker_node&lt;/a&gt; - Node&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Razenpok/Razensoft.Faktory&#34;&gt;Razensoft.Faktory&lt;/a&gt; - .NET&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out those projects and their README for more info on how to get
started with them.&lt;/p&gt;

&lt;h2 id=&#34;ruby&#34;&gt;Ruby&lt;/h2&gt;

&lt;p&gt;If you want to use Faktory with Ruby jobs, I&#39;ve written up a Getting
Started guide which shows you the few steps necessary to get jobs
running with &lt;code&gt;faktory_worker_ruby&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Getting-Started-Ruby&#34;&gt;Getting Started with Faktory and Ruby&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;thanks&#34;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;The response to Faktory from other open source developers has been
tremendous.  Lots of pull requests and issues reported, much discussion in the
issues and chatroom and lots of work still to be done.  Special thanks
to andrewstucki, cdrx, jonhoo, jweslley, and all the people who&#39;ve
built their own worker packages.&lt;/p&gt;

&lt;h2 id=&#34;wrapup&#34;&gt;Wrapup&lt;/h2&gt;

&lt;p&gt;Let us know if you have any problems -- &lt;a href=&#34;https://gitter.im/contribsys/faktory&#34;&gt;pop into the Faktory chatroom&lt;/a&gt; and say hi or &lt;a href=&#34;https://github.com/contribsys/faktory/issues/new&#34;&gt;open a new issue&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Faktory</title>
      <link>https://www.mikeperham.com/2017/10/24/introducing-faktory/</link>
      <pubDate>Tue, 24 Oct 2017 07:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2017/10/24/introducing-faktory/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;//www.mikeperham.com/2017/10/23/the-future-of-background-jobs/&#34;&gt;Yesterday I explained&lt;/a&gt; how a good background job framework is critical to
scaling business applications.  Today, meet
&lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;Faktory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;ve spent the last six months building &lt;strong&gt;Faktory&lt;/strong&gt;, a new background
job system which aims to bring the best practices developed over the
last five years in Sidekiq &lt;strong&gt;to every programming language&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://www.mikeperham.com/images/faktory-ui.png&#34; width=&#34;800&#34; height=&#34;375&#34;/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-basics&#34;&gt;The Basics&lt;/h2&gt;

&lt;p&gt;Faktory is a server daemon which provides a simple API to produce and
consume background jobs.  Here&#39;s the chatter to create and execute
a background job:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; PUSH {&amp;quot;jid&amp;quot;:&amp;quot;1238abc712&amp;quot;,&amp;quot;jobtype&amp;quot;:&amp;quot;SomeJob&amp;quot;,&amp;quot;args&amp;quot;:[1,2,&amp;quot;hello&amp;quot;],&amp;quot;queue&amp;quot;:&amp;quot;default&amp;quot;}
&amp;lt; OK
&amp;gt; FETCH critical default low
&amp;lt; {&amp;quot;jid&amp;quot;:&amp;quot;1238abc712&amp;quot;,&amp;quot;jobtype&amp;quot;:&amp;quot;SomeJob&amp;quot;,&amp;quot;args&amp;quot;:[1,2,&amp;quot;hello&amp;quot;],&amp;quot;queue&amp;quot;:&amp;quot;default&amp;quot;}
[...do the work...]
&amp;gt; ACK {&amp;quot;jid&amp;quot;:&amp;quot;1238abc712&amp;quot;}
&amp;lt; OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jobs are a small JSON hash with a few mandatory keys.
Producers PUSH a job to a queue. Consumers FETCH jobs from queues,
process them and then either ACK (success) or FAIL the job.  Faktory
will store and re-enqueue failed jobs over time just as Sidekiq does
(these are called &amp;quot;retries&amp;quot;).  Networks fail and bugs happen, job retries
are critical to a &amp;quot;self-healing&amp;quot; production environment.&lt;/p&gt;

&lt;p&gt;To execute jobs, you need a Faktory worker process which can run
your business logic in the language of your choice.  With the launch
today, I&#39;m providing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;faktory&lt;/code&gt; &lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;link&lt;/a&gt; - high
performance background job server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;faktory_worker_ruby&lt;/code&gt; &lt;a href=&#34;https://github.com/contribsys/faktory_worker_ruby&#34;&gt;link&lt;/a&gt; -
a Rubygem which can execute jobs fetched from Faktory using Ruby,
similar to Sidekiq&lt;/li&gt;
&lt;li&gt;&lt;code&gt;faktory_worker_go&lt;/code&gt; &lt;a href=&#34;https://github.com/contribsys/faktory_worker_go&#34;&gt;link&lt;/a&gt; -
a library for building a Go-based worker process&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How It Works&lt;/h2&gt;

&lt;p&gt;Many existing job systems provide no persistence or a simple binlog
which can be replayed in case of crash.&lt;/p&gt;

&lt;p&gt;Faktory goes further and provides the same job persistence, state management and
monitoring Web UI that Sidekiq does.  It uses
Facebook&#39;s high-performance &lt;a href=&#34;http://rocksdb.org&#34;&gt;RocksDB&lt;/a&gt; embedded
datastore internally to
persist all job data, queues, error state, etc.  It exposes a Web UI
(which is similar to Sidekiq&#39;s), allowing you to see the current
state of your queues, jobs and workers.&lt;/p&gt;

&lt;p&gt;Faktory listens on port 7419 for commands and port 7420 for the Web UI.
7419 for the robot workers, 7420 for the human bosses.&lt;/p&gt;

&lt;h2 id=&#34;get-started&#34;&gt;Get Started&lt;/h2&gt;

&lt;p&gt;The project is brand new so it will take a few weeks to polish the
development process.  If you are a Gopher, you can build the binary locally with Go 1.9.
If you have Vagrant 2.x running, you can run Faktory via
the Vagrant box in &lt;code&gt;build/ubuntu&lt;/code&gt;.  See the &lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Development&#34;&gt;Development wiki page&lt;/a&gt;
for more detail.&lt;/p&gt;

&lt;p&gt;We&#39;ll eventually get some install options plugged into the
&lt;a href=&#34;https://github.com/contribsys/faktory/wiki/Installation&#34;&gt;Installation wiki page&lt;/a&gt;.
Like all new things, it&#39;s rough today but it will get better over time.&lt;/p&gt;

&lt;h1 id=&#34;fak&#34;&gt;FAK&lt;/h1&gt;

&lt;p&gt;Q. Can I use it in production?&lt;/br&gt;
A. It&#39;s a brand new project but only you can determine how risk tolerant you are.
I will release 1.0 when the APIs are solid and I feel it is stable.&lt;/p&gt;

&lt;p&gt;Q. Does Faktory require Redis?&lt;br/&gt;
A. No. Faktory is a standalone 64-bit Linux binary; it needs a Faktory worker
process to consume jobs.  Redis -&amp;gt; Sidekiq == Faktory -&amp;gt; Faktory worker&lt;/p&gt;

&lt;p&gt;Q. Are there other things like Faktory?&lt;br/&gt;
A. Yep, beanstalkd, starling, gearman and others.  Faktory aims to be
more feature-rich and better supported.  Many of Faktory&#39;s OSS competitors
are &amp;quot;dead&amp;quot; and no longer supported.  I am fortunate enough to have both
expertise in background jobs and a business model to support Faktory long-term.&lt;/p&gt;

&lt;p&gt;Q. What&#39;s going to happen to Sidekiq?&lt;br/&gt;
A. Nothing.  It&#39;s stable, powerful and fully supported.  If you have a
Ruby/Rails app, it&#39;s a natural choice for background jobs.&lt;/p&gt;

&lt;p&gt;Q. Will you have a commercial version, just like Sidekiq Pro and Enterprise?&lt;br/&gt;
A. If Faktory sees good uptake, likely yes in 2018.
Several features like periodic jobs, batches and unique jobs would fit
very well into a &amp;quot;Faktory Pro&amp;quot;.&lt;/p&gt;

&lt;p&gt;Q. Can I help?&lt;br/&gt;
A. Absolutely.  Faktory&#39;s GitHub repo is &lt;a href=&#34;https://github.com/contribsys/faktory&#34;&gt;contribsys/faktory&lt;/a&gt;;
try it out and leave feedback.  Build a worker library in your language
of choice.  I&#39;m fluent in Ruby/Go but not much beyond that.&lt;/p&gt;

&lt;p&gt;Q. Can Faktory be provisioned and managed as a SaaS?&lt;br/&gt;
A. I have no plans to do so myself but I imagine this would be useful to many.
I would be happy to chat privately with people interested in offering
Faktory as a service, Heroku add-on, etc.&lt;/p&gt;

&lt;p&gt;Q. Man, I love the q in Sidekiq.  Why no q?&lt;br/&gt;
A. Because &amp;quot;Faqtory&amp;quot; sounds like software for building this FAQ and
a multi-billion dollar conglomerate has the worldwide trademark
for &amp;quot;Worq&amp;quot;.&lt;/p&gt;

&lt;p&gt;Q. Where can I ask further questions?&lt;br/&gt;
A. Since you&#39;ve read to the bottom, you get top sekret access to the
&lt;a href=&#34;https://gitter.im/contribsys/faktory&#34;&gt;contribsys/faktory&lt;/a&gt; Gitter chat room.
I&#39;ll hang out there when I can. Stop by and say hi!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Future of Background Jobs</title>
      <link>https://www.mikeperham.com/2017/10/23/the-future-of-background-jobs/</link>
      <pubDate>Mon, 23 Oct 2017 07:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2017/10/23/the-future-of-background-jobs/</guid>
      <description>&lt;p&gt;Whether sending an email, adding an item to your cart or tracking an
impression, modern businesses can be modeled as a series of business
transactions.  I believe that a good background job framework is the
best way to execute these transactions and scale your business applications
across many machines.  A good background job framework gives you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a simple API for defining and calling jobs&lt;/li&gt;
&lt;li&gt;automatic error handling and retry logic&lt;/li&gt;
&lt;li&gt;an interface for monitoring, debugging and introspection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These jobs become much easier to reason about and debug when they
all use similar calling conventions, logging and execution environment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In fact, I would argue that the current Serverless trend is
(background jobs - devops + price).  Squint a bit and a serverless
function call looks a bit like a background job invocation: both are, at
their core, asynchronous function calls into your app logic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the last five years, I&#39;ve created and polished Sidekiq, Sidekiq Pro
and Sidekiq Enterprise as best as I can, adding features and functionality
that scale (in the case of a few customers) to billions of jobs per day.&lt;/p&gt;

&lt;p&gt;But Sidekiq has two major constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The datastore is Redis, with all its advantages and disadvantages&lt;/li&gt;
&lt;li&gt;Almost all functionality is implemented in the Ruby worker process, limiting Sidekiq to Ruby&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What if we could have a system that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;scales to thousands of jobs per second?&lt;/li&gt;
&lt;li&gt;enables polyglot teams -- can be used with any programming language?&lt;/li&gt;
&lt;li&gt;provides those useful tools and metrics for monitoring and debugging?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sidekiq has been very successful but there&#39;s nothing Ruby-specific
about its conventions; almost all programming languages can benefit from a
similar tool.  Tomorrow, I&#39;m going to introduce you to my new open source
project which aims to do all of this: &lt;strong&gt;Faktory&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./images/faktory.png&#34; alt=&#34;faktory&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retries and Exceptions</title>
      <link>https://www.mikeperham.com/2017/09/29/retries-and-exceptions/</link>
      <pubDate>Fri, 29 Sep 2017 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2017/09/29/retries-and-exceptions/</guid>
      <description>&lt;p&gt;Do you hate getting your inbox filled with errors you know you can
ignore?  Here&#39;s one cool trick to make them disappear.&lt;/p&gt;

&lt;p&gt;If you are writing a background job, it is best practice to have that
job retry in the case of unexpected errors.  Networks can be flaky,
code can be buggy, data can be sketchy -- as they say, &amp;quot;stuff happens&amp;quot;.&lt;/p&gt;

&lt;p&gt;Sidekiq&#39;s default policy for jobs and retries is simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if a job returns normally, it is considered a success.&lt;/li&gt;
&lt;li&gt;if a job raises an error, the error is reported and a retry is
scheduled.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many people have asked me: &amp;quot;I have a flaky service, how can I retry the
job &lt;strong&gt;without&lt;/strong&gt; reporting the error to my error service and filling my
inbox&amp;quot;.  Sometimes the
asker will want to disable retries or their error service: no way!
Retries and error reporting are there to handle &lt;strong&gt;unexpected&lt;/strong&gt; problems that you need to
know about.  They should be
enabled by default and disabled only if your job is truly optional.&lt;/p&gt;

&lt;p&gt;Instead, your job should flag errors that can be ignored; we&#39;ll configure our
error service to ignore them.  First we add a flag to the root of all
errors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# config/initializers/exceptions.rb&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_accessor&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:ignore_please&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we update our job to rescue and flag those flaky errors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# your job/worker class&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;perform&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
    sketchy_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call
  &lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FlakyError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; ex
    &lt;span style=&#34;color:#75715e&#34;&gt;# flag it to be ignored&lt;/span&gt;
    ex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ignore_please &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# re-raise it so Sidekiq will retry&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; ex
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now configure your error service gem to ignore those errors.  Here&#39;s how
to do it for Bugsnag and Honeybadger:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://docs.bugsnag.com/platforms/ruby/rails/configuration-options/#ignore_classes&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# config/initializers/bugsnag.rb&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Bugsnag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configure &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ignore_classes &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; lambda {&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;ex&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; ex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ignore_please }
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# http://docs.honeybadger.io/ruby/getting-started/ignoring-errors.html#ignore-programmatically&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# config/initializers/honeybadger.rb&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Honeybadger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exception_filter &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;notice&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  notice&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:exception&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;ignore_please
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Done!  Now your inbox should be a little cleaner.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Helping Others</title>
      <link>https://www.mikeperham.com/2017/06/07/helping-others/</link>
      <pubDate>Wed, 07 Jun 2017 09:00:19 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2017/06/07/helping-others/</guid>
      <description>

&lt;p&gt;I&#39;m a big fan of helping and empowering others through my open source software contributions
but I often get pings from people from around the world asking for help.
These requests generally take two forms:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;quot;I&#39;m having this problem with your software...&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I want help with my business idea...&amp;quot;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One thing I&#39;ve learned over time is that &lt;strong&gt;talking to individuals
privately does not scale&lt;/strong&gt;.  You have to arrange a date/time, determine a
chat location/method, often to discuss a problem that can be solved in
3-5 minutes. Often business questions take an hour or more of due
diligence, demand research into a particular vertical, etc.  Here&#39;s the
policies I&#39;ve found work best for all parties.&lt;/p&gt;

&lt;h2 id=&#34;software-issues&#34;&gt;Software Issues&lt;/h2&gt;

&lt;p&gt;All OSS support must go into a persistent, searchable public forum.  No private email, no chat
rooms or IRC, etc.  Persistent means it can be found years from now.
Searchable means anyone can search for their own problem and find
related discussions.  GitHub Issues and StackOverflow are my go-to
solutions here.&lt;/p&gt;

&lt;p&gt;With these traits, users can search and find solutions to their own
problems without bothering you.  This is a very good thing: you&#39;re happy
and they&#39;re happy.&lt;/p&gt;

&lt;h2 id=&#34;business-help&#34;&gt;Business Help&lt;/h2&gt;

&lt;p&gt;Due to my notority and success, I&#39;ve found myself emailed more and more
frequently by random people wanting my opinion on various subjects (some
of which I&#39;m definitely not qualified for).  Unlike software support,
there&#39;s no issue tracker for building a business.  Instead I turn to the
example of another profession: college professors.  They have classes
with 100s of students, how do they provide one-on-one help to such a
large group?&lt;/p&gt;

&lt;p&gt;They provide &lt;strong&gt;office hours&lt;/strong&gt;.  Students can show up to the professor&#39;s
office at a well-known hour in order to get help.  If other students are
there, they all have to share the professor&#39;s time.&lt;/p&gt;

&lt;p&gt;This is the purpose of my weekly &lt;a href=&#34;http://sidekiq.org/support&#34;&gt;Happy Hour&lt;/a&gt;,
anyone can show up for that hour and video chat with me about any
subject.  If others show up, you might have to share the time.  We don&#39;t
have to arrange a time or location, you just need to RSVP so I know to
be there.&lt;/p&gt;

&lt;h2 id=&#34;wrapup&#34;&gt;Wrapup&lt;/h2&gt;

&lt;p&gt;By providing software support in an open, searchable forum and weekly
video chat, I can easily provide support to a large group of random
people &lt;strong&gt;for free&lt;/strong&gt; and still have time for my business, customers and family.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tracking down performance bugs in Sidekiq jobs</title>
      <link>https://www.mikeperham.com/2017/06/05/tracking-down-performance-bugs-in-sidekiq-jobs/</link>
      <pubDate>Mon, 05 Jun 2017 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2017/06/05/tracking-down-performance-bugs-in-sidekiq-jobs/</guid>
      <description>

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;A Sidekiq Enterprise customer recently emailed me to ask for help.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&#39;m having trouble trying to figure out why one particular worker I have takes so long per job. Some of the jobs are taking 30 minutes. What the program does is load a spreadsheet to the database. When I run &amp;quot;top&amp;quot;, it looks like this.  What should my next step be?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;//www.mikeperham.com/images/debugging-top.jpg&#34; alt=&#34;top output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-explanation&#34;&gt;The Explanation&lt;/h2&gt;

&lt;p&gt;Great question.  The top screenshot tells me a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each process is using ~4GB of RAM, which is a lot, but top also notes
the machine has ~64GB of memory so it&#39;s not necessarily unusual.&lt;/li&gt;
&lt;li&gt;There are four Ruby 2.1 processes (which I assume are Sidekiq
processes), each pegging a core at 100%.  We want to track down what
is causing the CPU to peg.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There&#39;s a two step process to get more info:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visit the Busy page in the Web UI and see which jobs are running right now.
See a job that&#39;s taking too long?  Note its PID and TID (&amp;quot;13159&amp;quot; and &amp;quot;otqnxjaoc&amp;quot; in the screenshot).&lt;/li&gt;
&lt;li&gt;Send the TTIN signal to that PID (&lt;code&gt;kill -TTIN 13159&lt;/code&gt;) and find the backtrace associated with that TID in the log output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;//www.mikeperham.com/images/debugging-busy.png&#34; alt=&#34;busy page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Often the job backtrace will give you the clue you need to solve the performance problem.&lt;/p&gt;

&lt;h2 id=&#34;the-conclusion&#34;&gt;The Conclusion&lt;/h2&gt;

&lt;p&gt;In this case, the backtrace did provide the necessary clue and the customer did find a solution.
He was creating a job per row in an Excel file but each job had to get the header data from
the Excel file; if there was 1000 rows, he&#39;d create 1000 jobs and &lt;strong&gt;each job would reparse the entire Excel file to get the header info&lt;/strong&gt;.
By restructing the job arguments to include the header info, he removed this redundant work and solved
a problem which had plagued him for months.  Time elapsed: less than an hour!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moral of the story: harness the awesome power of Sidekiq&#39;s TTIN feature to crush your performance bugs!&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello Sidekiq 5.0</title>
      <link>https://www.mikeperham.com/2017/04/25/hello-sidekiq-5.0/</link>
      <pubDate>Tue, 25 Apr 2017 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>https://www.mikeperham.com/2017/04/25/hello-sidekiq-5.0/</guid>
      <description>

&lt;figure style=&#34;float: right;&#34;&gt;
 &lt;img src=&#34;http://www.mikeperham.com/images/50.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;After a few months of work, I&#39;m happy to announce that Sidekiq 5.0 is
now available.  Sidekiq 5.0 refactors the core job processor to work better
with Rails 5 and includes a few breaking changes that have been pending for a
while.&lt;/p&gt;

&lt;h2 id=&#34;what-s-new&#34;&gt;What&#39;s New?&lt;/h2&gt;

&lt;h3 id=&#34;rails-5-native&#34;&gt;Rails 5 native!&lt;/h3&gt;

&lt;p&gt;Sidekiq::Processor has been redesigned to work well
with Rails 5.0&#39;s Executor.  The Executor is a new API which needs
to wrap any use of Rails code; it automatically handles code reloading,
database connection management and any other callbacks.  Before now,
Sidekiq had middleware to clean up database connections but
this is no longer necessary with the Executor.&lt;/p&gt;

&lt;p&gt;Note that Sidekiq 5.0 will still work with Rails 4.0+.&lt;/p&gt;

&lt;h3 id=&#34;bad-json-no-problem&#34;&gt;Bad JSON, no problem!&lt;/h3&gt;

&lt;p&gt;Sidekiq now explicitly handles malformed job payloads which cannot be
parsed as valid JSON.  This is usually due to pushing jobs to Redis via
other languages.  Invalid jobs are immediately sent to the Dead set so
they can be manually examined.  Previously these payloads were discarded
or needed to be removed from Redis manually.&lt;/p&gt;

&lt;h3 id=&#34;right-to-left-languages&#34;&gt;Right-to-Left Languages&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.mikeperham.com/images/bidi.png&#34; alt=&#34;bidi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Web UI can now natively render RTL (right-to-left) languages like
Arabic, Hebrew, Persian and Urdu.  This brings language support from 21
to 25 languages and another billion or so potential Sidekiq users!
Change your browser to request one of those languages
and the Web UI will render in that language.&lt;/p&gt;

&lt;h3 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;delay&lt;/code&gt; APIs are now disabled by default, since they pollute
&lt;code&gt;Class&lt;/code&gt; and can lead to overly large job payloads.  You can re-enable
them if your application uses that API.&lt;/p&gt;

&lt;p&gt;The quiet signal has been changed from USR1 to TSTP, which is available in JRuby
and better reflects the intent: Threads SToP.  USR1 will still work but is
deprecated. Sidekiq 4.2.9+ also supports TSTP so you can port your
deployment scripts to use the new signal without risking a major version bump
at the same time.&lt;/p&gt;

&lt;p&gt;Support for Ruby 2.0, Ruby 2.1 and Rails 3.2 is dropped.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/5.0-Upgrade.md&#34;&gt;5.0 upgrade notes&lt;/a&gt; for more detail and how to upgrade safely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you to all my &lt;a href=&#34;http://sidekiq.org&#34;&gt;Sidekiq Pro and Sidekiq Enterprise&lt;/a&gt; customers for
ensuring the long-term support and maintenance of Sidekiq.  Support OSS software
and your infrastructure vendors so we can support you!&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
