<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Perham</title>
    <link>http://www.mikeperham.com</link>
    <description>Latest content from Mike Perham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mperham@gmail.com (Mike Perham)</managingEditor>
    <webMaster>mperham@gmail.com (Mike Perham)</webMaster>
    <lastBuildDate>Tue, 25 Apr 2017 09:00:00 -0700</lastBuildDate>
    <atom:link href="http://www.mikeperham.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hello Sidekiq 5.0</title>
      <link>http://www.mikeperham.com/2017/04/25/hello-sidekiq-5.0/</link>
      <pubDate>Tue, 25 Apr 2017 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/04/25/hello-sidekiq-5.0/</guid>
      <description>

&lt;figure style=&#34;float: right;&#34;&gt;
 &lt;img src=&#34;http://www.mikeperham.com/images/50.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;After a few months of work, I&#39;m happy to announce that Sidekiq 5.0 is
now available.  Sidekiq 5.0 refactors the core job processor to work better
with Rails 5 and includes a few breaking changes that have been pending for a
while.&lt;/p&gt;

&lt;h2 id=&#34;what-s-new&#34;&gt;What&#39;s New?&lt;/h2&gt;

&lt;h3 id=&#34;rails-5-native&#34;&gt;Rails 5 native!&lt;/h3&gt;

&lt;p&gt;Sidekiq::Processor has been redesigned to work well
with Rails 5.0&#39;s Executor.  The Executor is a new API which needs
to wrap any use of Rails code; it automatically handles code reloading,
database connection management and any other callbacks.  Before now,
Sidekiq had middleware to clean up database connections but
this is no longer necessary with the Executor.&lt;/p&gt;

&lt;p&gt;Note that Sidekiq 5.0 will still work with Rails 4.0+.&lt;/p&gt;

&lt;h3 id=&#34;bad-json-no-problem&#34;&gt;Bad JSON, no problem!&lt;/h3&gt;

&lt;p&gt;Sidekiq now explicitly handles malformed job payloads which cannot be
parsed as valid JSON.  This is usually due to pushing jobs to Redis via
other languages.  Invalid jobs are immediately sent to the Dead set so
they can be manually examined.  Previously these payloads were discarded
or needed to be removed from Redis manually.&lt;/p&gt;

&lt;h3 id=&#34;right-to-left-languages&#34;&gt;Right-to-Left Languages&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.mikeperham.com/images/bidi.png&#34; alt=&#34;bidi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Web UI can now natively render RTL (right-to-left) languages like
Arabic, Hebrew, Persian and Urdu.  This brings language support from 21
to 25 languages and another billion or so potential Sidekiq users!
Change your browser to request one of those languages
and the Web UI will render in that language.&lt;/p&gt;

&lt;h3 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;delay&lt;/code&gt; APIs are now disabled by default, since they pollute
&lt;code&gt;Class&lt;/code&gt; and can lead to overly large job payloads.  You can re-enable
them if your application uses that API.&lt;/p&gt;

&lt;p&gt;The quiet signal has been changed from USR1 to TSTP, which is available in JRuby
and better reflects the intent: Threads SToP.  USR1 will still work but is
deprecated. Sidekiq 4.2.9+ also supports TSTP so you can port your
deployment scripts to use the new signal without risking a major version bump
at the same time.&lt;/p&gt;

&lt;p&gt;Support for Ruby 2.0, Ruby 2.1 and Rails 3.2 is dropped.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/mperham/sidekiq/blob/master/5.0-Upgrade.md&#34;&gt;5.0 upgrade notes&lt;/a&gt; for more detail and how to upgrade safely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you to all my &lt;a href=&#34;http://sidekiq.org&#34;&gt;Sidekiq Pro and Sidekiq Enterprise&lt;/a&gt; customers for
ensuring the long-term support and maintenance of Sidekiq.  Support OSS software
and your infrastructure vendors so we can support you!&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sidekiq at Railsconf 2017</title>
      <link>http://www.mikeperham.com/2017/04/24/sidekiq-at-railsconf-2017/</link>
      <pubDate>Mon, 24 Apr 2017 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/04/24/sidekiq-at-railsconf-2017/</guid>
      <description>

&lt;p&gt;Every year I attend Rubyconf and Railsconf and this year is no
different.  I launched Sidekiq 4.0 at Rubyconf 2015 and now I&#39;m excited
 to get down to Phoenix and launch Sidekiq 5.0!
I want to meet any Rubyists, new or old, who want to chat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://railsconf.com/assets/objects/RailsconfInternal@2x-2c15a28ee162c7f9151c2148adaeccfeb2786fdb748a4f8b3a948a3b1e705d57.png&#34; alt=&#34;Railsconf&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-personal-note&#34;&gt;A Personal Note&lt;/h2&gt;

&lt;p&gt;I attended my first conference in 2007, Rubyconf, in Charlotte NC.
I still remember my mental state: &lt;strong&gt;awkwardness, isolation and loneliness
because I knew about two people there&lt;/strong&gt;.  By nature I&#39;m an introvert and
not really good at mingling in crowds (one reason booze is so popular
at conferences: it can decrease your inhibitions and make you more chatty).
As my reputation increased in the community, going to conferences became
easier because people knew me but here&#39;s my dirty secret:
I&#39;m still awkward and not great at socializing with new people.&lt;/p&gt;

&lt;p&gt;So I have a guarantee: if you don&#39;t know anyone at Railsconf or just
need someone to talk to, find me and say hello.  The first day I always
wear a Sidekiq t-shirt.  You know my blog and here&#39;s some
topics I will talk endlessly about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You and your Ruby story&lt;/li&gt;
&lt;li&gt;Performance and scalability&lt;/li&gt;
&lt;li&gt;Threading vs Evented design in languages and systems&lt;/li&gt;
&lt;li&gt;Sidekiq and other background job systems&lt;/li&gt;
&lt;li&gt;Ruby, Crystal and Go&lt;/li&gt;
&lt;li&gt;Open Source, Sustainability, and Business&lt;/li&gt;
&lt;li&gt;Soccer, Motorcycles and Sports Cars (ask me about the time I crashed a
race car at Laguna Seca!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&#39;s also quite likely that you know my name but I don&#39;t know yours and
I&#39;m terrible with names/faces so &lt;strong&gt;please introduce yourself&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;PS And of course, I&#39;m giving away Sidekiq stickers to anyone who asks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring Redis</title>
      <link>http://www.mikeperham.com/2017/04/20/monitoring-redis/</link>
      <pubDate>Thu, 20 Apr 2017 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/04/20/monitoring-redis/</guid>
      <description>

&lt;figure style=&#34;float: right; padding-left: 50px&#34;&gt;
 &lt;img src=&#34;./images/redis.png&#34; width=&#34;500&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Redis is widely by the Ruby community but, like any complex piece of
infrastructure, isn&#39;t well understood by many of its users.  I wanted to
write a blog post that would answer the question: &lt;strong&gt;How can I check on
the health of my Redis server?&lt;/strong&gt;  Here&#39;s a few things you can do to
better understand your Redis server.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ask-for-info&#34;&gt;Ask for Info&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;info&lt;/code&gt; command is the easiest way to get an overall view of Redis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli info
# Server
redis_version:3.2.5
tcp_port:6379
uptime_in_seconds:1313002
uptime_in_days:15
executable:/usr/local/opt/redis/bin/redis-server
config_file:/usr/local/etc/redis.conf

# Clients
connected_clients:1
client_longest_output_list:0
client_biggest_input_buf:0
blocked_clients:0

# Memory
used_memory:1043920
used_memory_human:1019.45K
used_memory_rss:16564224
used_memory_rss_human:15.80M
used_memory_peak:18961872
used_memory_peak_human:18.08M
total_system_memory:8589934592
total_system_memory_human:8.00G
used_memory_lua:60416
used_memory_lua_human:59.00K
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
mem_fragmentation_ratio:15.87
mem_allocator:libc

# Stats
total_connections_received:396
total_commands_processed:588823
instantaneous_ops_per_sec:0
total_net_input_bytes:136139888
total_net_output_bytes:216183171
instantaneous_input_kbps:0.00
instantaneous_output_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:95
evicted_keys:0
keyspace_hits:6978
keyspace_misses:20802
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:1007
migrate_cached_sockets:0

# CPU
used_cpu_sys:67.83
used_cpu_user:42.98
used_cpu_sys_children:0.07
used_cpu_user_children:0.07

# Keyspace
db4:keys=25,expires=24,avg_ttl=892611707
db5:keys=37,expires=36,avg_ttl=829671792
db8:keys=4,expires=2,avg_ttl=4423347833
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(output trimmed a bit)&lt;/p&gt;

&lt;p&gt;There&#39;s a few very important pieces to note in the output:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;config_file&lt;/code&gt; shows where Redis is getting its static configuration.
If you need to tweak a setting, this is where to go.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connected_clients&lt;/code&gt; shows how many network client connections are
currently connected.  It&#39;s normal for this to be in the hundreds or
even thousands for a very busy server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;used_memory_*&lt;/code&gt; is important to see how much RAM is used by Redis.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Memory is the most important thing to note here.  Your entire dataset
size &lt;strong&gt;must&lt;/strong&gt; fit into machine RAM.  If it does not, the resulting swapping will lead
to terrible performance and massive latency spikes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;redis-cli --stat&lt;/code&gt; will give you the most important details in a real-time view
you can watch or scrape:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --stat
------- data ------ --------------------- load -------------------- - child -
keys       mem      clients blocked requests            connections
31         1009.00K 1       0       681483 (+0)         576
31         1009.00K 1       0       681484 (+1)         576
31         1009.00K 1       0       681485 (+1)         576
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;redis-cli&lt;/code&gt; is a very powerful tool with lots of nice features within
it.  It&#39;s worth running &lt;code&gt;--help&lt;/code&gt; and playing with the various options
and modes.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;look-out-for-latency&#34;&gt;Look out for Latency&lt;/h2&gt;

&lt;p&gt;Latency is the time difference between request and response, e.g. the client sends a
command and gets a result back in 10ms.  We want this round trip to be as fast as
possible.
Really bad latency can trigger &amp;quot;Operation timed out&amp;quot; exceptions in your application.
There are two general latency sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Network - the network between the client and Redis can be congested.&lt;/li&gt;
&lt;li&gt;Internal - Redis itself might have commands or internal operations
which add significant latency.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;network&#34;&gt;Network&lt;/h3&gt;

&lt;p&gt;You can see the current network latency easily:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --latency
min: 0, max: 1, avg: 0.29 (632 samples)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows a minimum of 0ms and max of 1ms, averaging 290µs, latency to
my localhost server.  Ideal conditions.&lt;/p&gt;

&lt;p&gt;You can also easily watch latency history, here with a default window of 15 sec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli --latency-history
min: 0, max: 7, avg: 0.24 (1321 samples) -- 15.00 seconds range
min: 0, max: 256, avg: 0.55 (1280 samples) -- 15.01 seconds range
min: 0, max: 3062, avg: 3.86 (1051 samples) -- 15.98 seconds range
min: 0, max: 490, avg: 0.69 (1255 samples) -- 15.01 seconds range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the first window looks pretty good, the second window had a
spike of 256ms, and the third had a spike of 3062ms (ouch!).&lt;/p&gt;

&lt;p&gt;I triggered these spikes by running &lt;code&gt;redis-cli debug sleep 0.5&lt;/code&gt;.  Not
recommended in production.&lt;/p&gt;

&lt;h3 id=&#34;internal&#34;&gt;Internal&lt;/h3&gt;

&lt;p&gt;Redis also has a latency event and monitoring subsystem to track
commands execution latency and operations (like forking) which might
block command processing. Use the &lt;a href=&#34;https://redis.io/topics/latency-monitor&#34;&gt;LATENCY&lt;/a&gt;
commands to monitor and collect these events.  Some commands can be naturally
slow, see SLOWLOG below.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;watch-for-slow-commands&#34;&gt;Watch for Slow Commands&lt;/h2&gt;

&lt;p&gt;Because it is single-threaded, it&#39;s vitally important that all commands
to Redis process quickly or one slow command can block everyone else for
a significant amount of time.  Redis includes a configurable &lt;a href=&#34;https://redis.io/commands/slowlog&#34;&gt;SLOWLOG&lt;/a&gt;
command to watch for these bad apples.&lt;/p&gt;

&lt;p&gt;My Redis is configured by Homebrew to log any commands that take longer than 10ms, a
sensible default.  Run this on your instance and see if you find anything suspicious:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli slowlog get 10
1) 1) (integer) 3
   2) (integer) 1492461257
   3) (integer) 11825
   4)  1) &amp;quot;LPUSH&amp;quot;
       2) &amp;quot;queue:default&amp;quot;
       3) &amp;quot;{\&amp;quot;queue\&amp;quot;:\&amp;quot;default\&amp;quot;,\&amp;quot;jid\&amp;quot;:\&amp;quot;df55c4e27c48e63f0d5212b4\&amp;quot;,\&amp;quot;class\&amp;quot;:\&amp;quot;LoadWorker\&amp;quot;,\&amp;quot;args\&amp;quot;:[0],\&amp;quot;created_at\&amp;quot;:1492461257.208411,\&amp;quot;enqueued_at\&amp;quot;... (33 more bytes)&amp;quot;
       4) &amp;quot;{\&amp;quot;queue\&amp;quot;:\&amp;quot;default\&amp;quot;,\&amp;quot;jid\&amp;quot;:\&amp;quot;4989e31cea7ecf78e93b7f9f\&amp;quot;,\&amp;quot;class\&amp;quot;:\&amp;quot;LoadWorker\&amp;quot;,\&amp;quot;args\&amp;quot;:[1],\&amp;quot;created_at\&amp;quot;:1492461257.2084169,\&amp;quot;enqueued_at... (34 more bytes)&amp;quot;
      [snip]
      32) &amp;quot;... (9971 more arguments)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are four parts to each entry: 3 is a unique identifier, 1492461257 is the timestamp
when it happened and 11825 is the number of microseconds for execution, 11.825ms.
The last part is the command with arguments.&lt;/p&gt;

&lt;p&gt;I happen to know that entry is an LPUSH to the &lt;code&gt;default&lt;/code&gt; queue of 10,000 jobs.  It&#39;s
a testcase for Sidekiq::Client&#39;s &lt;code&gt;push_bulk&lt;/code&gt; API.  Since we&#39;re
enqueueing 10,000 jobs at once, it&#39;s not surprising that might take almost 12ms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is safe to run SLOWLOG in production and highly encouraged.&lt;/strong&gt;  In
fact, I would play with &lt;code&gt;slowlog-log-slower-than&lt;/code&gt; values until you find
a setting that catches unexpectedly slow things but does not contain a
lot of &amp;quot;normal&amp;quot; commands from your application.
If you find the slowlog is constantly full, &lt;strong&gt;redesign your system so it
doesn&#39;t run those slow commands&lt;/strong&gt;.
  For instance, if you want to enqueue
10,000 jobs, perhaps you could call &lt;code&gt;push_bulk&lt;/code&gt; 10 times with 1000 jobs
each, so each invocation only takes 1/10th as long.
If a piece of OSS is running a slow comamnd,
open an issue so the maintainer knows about the problem.  I&#39;m not too
proud to admit it&#39;s
&lt;a href=&#34;https://github.com/mperham/sidekiq/issues/3332&#34;&gt;happened&lt;/a&gt;
several times with Sidekiq; I fix them as fast as I can!&lt;/p&gt;

&lt;h2 id=&#34;extra-credit&#34;&gt;Extra Credit&lt;/h2&gt;

&lt;p&gt;When I was managing technical operations, my team was
responsible for monitoring our infrastructure.  We would do things like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a cron job to dump the slowlog to a daily email if it is not empty.
Treat any entries as issues to be investigated and fixed.&lt;/li&gt;
&lt;li&gt;Set up a dashboard for the Redis server.  Have dedicated
graphs for &lt;code&gt;connected_clients&lt;/code&gt;, &lt;code&gt;instantaneous_ops_per_sec&lt;/code&gt;, and &lt;code&gt;used_memory_rss&lt;/code&gt;.
Treat big changes in these graphs as incidents to be investigated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Part of owning your infrastructure is monitoring its health proactively;
understanding these tools and having quick access to this data will be
invaluable when debugging failures and outages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating from redis-namespace</title>
      <link>http://www.mikeperham.com/2017/04/10/migrating-from-redis-namespace/</link>
      <pubDate>Mon, 10 Apr 2017 09:00:00 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/04/10/migrating-from-redis-namespace/</guid>
      <description>

&lt;p&gt;In a blog post in 2015, &lt;a href=&#34;http://www.mikeperham.com/2015/09/24/storing-data-with-redis/&#34;&gt;Storing Data with Redis&lt;/a&gt;, I wrote about your options for partitioning data
stored within Redis and came down pretty hard on using key namespacing
via redis-namespace.
The redis-namespace gem allows you to share a Redis database among several
applications by prefixing every key with a namespace but it&#39;s a terrible hack
that no one should use.  Redis
already has a native solution if you want to share a Redis instance: databases.
The default database is 0.  Here&#39;s how to point Sidekiq to use database
1 instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure_client&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;# these are equivalent&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;redis://localhost:6379/1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default, Redis offers 16 databases: 0-15.  This is configurable in
redis.conf.  Keys in one database are not visible from another database.
All databases will share global data like registered Lua scripts.
In practice that&#39;s not a big deal due to Redis&#39;s excellent implementation.&lt;/p&gt;

&lt;p&gt;If you have multiple apps and want to share a Redis instance, just have
them use different databases.  Create a convention for how your apps map to
database indexes and stick with it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cache data, job data and transactional/persistent data have different configuration needs and should
not share a Redis instance at all.  If you use Redis for caching and
jobs and your budget is &amp;gt;$0, you should have two different Redis instances
with different configurations. Job data is closer to transactional data,
they can probably share the same Redis if necessary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&amp;quot;Our current application uses redis-namespace.  How do we migrate away from namespace usage without losing everything we have currently?&amp;quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ah, this is possible but non-trivial, as with all data migrations.
I will assume you are running Sidekiq.
Continue onward for the nittiest of gritty, dear reader.&lt;/p&gt;

&lt;h2 id=&#34;migrating-your-data&#34;&gt;Migrating your Data&lt;/h2&gt;

&lt;p&gt;Like any data migration, you have two choices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run old/new systems in parallel for N days/weeks&lt;/li&gt;
&lt;li&gt;Shutdown old setup, migrate data, start new setup&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;running-old-new-in-parallel&#34;&gt;Running old/new in parallel&lt;/h3&gt;

&lt;p&gt;You want to start two Sidekiq processes: old and new.  The old
process(es) will continue to process any retries and scheduled jobs in
the old data.  The new process(es) will process all new jobs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Starting an old and new process
OLD=1 bundle exec sidekiq ...
bundle exec sidekiq ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We specifically want the client configuration to only point to the new
system so that any new jobs from Puma/Unicorn/etc will go to the new
system.  In this example, the old Redis is using the &lt;code&gt;foo&lt;/code&gt; namespace in
database 0.  We want the new system to use database 1 with no namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# Note that the client ALWAYS pushes to the new process&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure_client&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure_server&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;OLD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# We&amp;#39;ll continue to poll for old scheduled jobs and retries&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are a Sidekiq Pro customer you can monitor both old and new in the Web UI with Sidekiq Pro&#39;s
&lt;a href=&#34;https://github.com/mperham/sidekiq/wiki/Pro-Web-UI#sharding&#34;&gt;Web UI Sharding support&lt;/a&gt;,
just mount a copy for the old and new config in your &lt;code&gt;config/routes.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NEWPOOL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ConnectionPool&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Redis&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;OLDPOOL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ConnectionPool&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Redis&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Namespace&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:foo&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:redis&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Redis&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;mount&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Pro&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Web&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;with(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;redis_pool&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;NEWPOOL&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;at&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/sidekiqnew&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;sidekiqnew&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;mount&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Sidekiq&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Pro&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Web&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;with(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;redis_pool&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;OLDPOOL&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;at&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/sidekiqold&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;sidekiqold&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Monitor your retry and scheduled job counts in the old system.  After N weeks, you should be able to safely decommission the old Sidekiqs.  Ciao, bella!&lt;/p&gt;

&lt;h3 id=&#34;the-big-migration&#34;&gt;The big migration&lt;/h3&gt;

&lt;p&gt;If you can afford the downtime, it can be a lot faster/easier/cheaper to simply
migrate your Redis data to strip off the namespace from the key.  You
shut down the old processes (&lt;strong&gt;anything&lt;/strong&gt; that talks to Redis with the namespace),
run the migration script, and start everything with the new setup once it&#39;s complete.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How long will it take?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an excellent question, look at the size of your databases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli info
[snip]

# Keyspace
db0:keys=2,expires=0,avg_ttl=0
db4:keys=18,expires=15,avg_ttl=1894990352
db5:keys=10,expires=7,avg_ttl=1894990303
db14:keys=7,expires=4,avg_ttl=1894990402
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the keys count.  This will tell you the magnitude of your
problem: do you have thousands of keys or millions?  For every single
key, we want to strip the namespace from the front of it.&lt;/p&gt;

&lt;p&gt;We&#39;ll write a Lua script which will run atomically on our instance and
rename every key.  &lt;strong&gt;This script will not move the data from database 0
to database 1&lt;/strong&gt; (for future readers, in Redis 4.0, there is a &lt;a href=&#34;https://redis.io/commands/swapdb&#34;&gt;SWAPDB&lt;/a&gt; command which can do
this).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING: Depending on the amount of data in Redis, this script may
crush your Redis instance for a long time.  Do not use it while other
things are using that Redis instance.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# remove_ns.rb&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;################################&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Change &amp;quot;foo&amp;quot; to your namespace, leave the &amp;quot;:*&amp;quot; alone&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;ns&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;foo:*&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;################################&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Point to your Redis instance&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Redis&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;LUA&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;  local count = 0&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;  local keys = redis.call(&amp;quot;keys&amp;quot;, ARGV[1])&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;  for _, keyname in pairs(keys) do&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    redis.call(&amp;quot;rename&amp;quot;, keyname, string.sub(keyname, ARGV[2]))&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    count = count + 1&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;  end&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;  return count&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;LUA&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;eval(script,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ns,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ns&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Complete, migrated #{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;} keys in #{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;} sec&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Shut down everything talking to your Redis instance.&lt;/strong&gt; You can verify
by running &lt;code&gt;redis-cli monitor&lt;/code&gt; against the instance and seeing that
nothing is coming over the wire.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;ruby remove_ns.rb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Deploy your new configuration and start everything back up.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;I created a script which creates 500 plain keys and 500 namespaced keys
to verify that 500 keys are migrated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;gem&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt; 4&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Redis&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;times&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set(idx,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;idx)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;redis-namespace&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;rn&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Redis&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Namespace&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:foo&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;redis)&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;times&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;rn&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set(idx,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;idx)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ruby remove_ns.rb
Complete, migrated &lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt; keys in &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.003167 sec
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The keyspace count goes from 1000 to 500 with the migration.  Please
note that this migration script blindly renames keys so if you have keys named
&amp;quot;foo:bar&amp;quot; and &amp;quot;bar&amp;quot;, it&#39;s possible the latter will be overwritten in the
migration due to the rename.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Avoid namespaces.&lt;/li&gt;
&lt;li&gt;Data migrations are always fraught with peril, test in staging.&lt;/li&gt;
&lt;li&gt;Make backups and always have a replica handy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RTL scripts and BiDi webapps</title>
      <link>http://www.mikeperham.com/2017/03/14/rtl-scripts-and-bidi-webapps/</link>
      <pubDate>Tue, 14 Mar 2017 10:51:54 -0700</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/03/14/rtl-scripts-and-bidi-webapps/</guid>
      <description>

&lt;p&gt;A user recently submitted a Farsi translation for the Sidekiq
Web UI and I quickly merged it, happy to see another language supported.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unfortunately, as you know, no good deed goes unpunished.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I quickly learned that the Farsi language uses an RTL script - it is
written from right to left.  Like a written page, webapps displaying
Farsi text should be flipped so they are RTL.&lt;/p&gt;

&lt;p&gt;Webapps that can dynamically change text direction are called
bi-directional, or BiDi.  As you might imagine BiDi support isn&#39;t
trivial but can be done.&lt;/p&gt;

&lt;p&gt;My i18n goal with the Sidekiq Web UI is simple: be as inclusive as
reasonably possible.  I can&#39;t speak any languages fluently except English
but our open source community has developers that speak hundreds
of languages and can help in the effort. I&#39;m proud that the Web UI supports
20+ LTR languages today but it pains me that I can&#39;t support Farsi, Hebrew,
Arabic and other RTL languages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/issues/3381&#34;&gt;&lt;strong&gt;Until now!&lt;/strong&gt;&lt;/a&gt; Here&#39;s what I did.&lt;/p&gt;

&lt;h3 id=&#34;1-flip-that-css&#34;&gt;1. Flip that CSS&lt;/h3&gt;

&lt;p&gt;There&#39;s a number of automated tools for scanning CSS files and outputing
flipped rules to be used when emitting RTL pages.  These rules will override
your standard LTR rules: where you specify padding-left, you want
padding-right, etc.&lt;/p&gt;

&lt;p&gt;It helped a lot that I&#39;ve kept the UI to one simple CSS file, with no
additional tooling or build process.  Bootstrap 3.x is popular enough that
other people have created flipped overrides for it already.  The only hard
work was creating application-rtl.css.&lt;/p&gt;

&lt;p&gt;Normal CSS, application.css:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;someclass&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;margin-left&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Flipped CSS, application-rtl.css:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;someclass&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;margin-right&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;2-fix-up-the-generated-css&#34;&gt;2. Fix up the Generated CSS&lt;/h3&gt;

&lt;p&gt;Unfortunately it&#39;s not that easy; you&#39;ll note that now we have a
margin on &lt;strong&gt;both&lt;/strong&gt; sides when rendering RTL.  What I had to do was go
through the generated application-rtl.css and update the rules to make
them true overrides, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;someclass&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;margin-right&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;margin-left&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;unset&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sidekiq&#39;s Web UI doesn&#39;t have a huge amount of CSS.  It took me less
than an hour to go through 1000 lines, one at a time.&lt;/p&gt;

&lt;h3 id=&#34;3-include-the-right-css&#34;&gt;3. Include the right CSS&lt;/h3&gt;

&lt;p&gt;Now you include your application.css as normal and optionally include
the RTL overrides if rendering an RTL script.  For example, I put this RTL logic in &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;%= root_path %&amp;gt;stylesheets/bootstrap.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;media&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;screen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;lt;&lt;/span&gt;% if rtl? %&amp;gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;%= root_path %&amp;gt;stylesheets/bootstrap-rtl.min.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;media&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;screen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;%= root_path %&amp;gt;stylesheets/application.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;media&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;screen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;lt;&lt;/span&gt;% if rtl? %&amp;gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;%= root_path %&amp;gt;stylesheets/application-rtl.css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;media&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;screen&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;rtl?&lt;/code&gt; method is very simple, it just checks for Farsi as the
current locale:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;rtl?&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;fa&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;locale&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result (still buggy, note graph axis labels, but usable):&lt;/p&gt;

&lt;p&gt;&lt;img width=&#34;640&#34; src=&#34;http://www.mikeperham.com/images/issue3381.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;standards&#34;&gt;Standards&lt;/h3&gt;

&lt;p&gt;There are some upcoming standards on the horizon for easier BiDi
support in CSS so you wouldn&#39;t need overrides at all:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;someclass&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;margin-inline-start:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;inline-start&lt;/code&gt; maps to &lt;code&gt;right&lt;/code&gt; in RTL and &lt;code&gt;left&lt;/code&gt; in LTR.  Unfortunately
only Firefox supports this syntax today or I could have just updated
application.css directly.  I hope the other browser vendors can
implement this soon as it greatly eases the burden of BiDi support.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;This was an extremely brief overview of what I had to do.  Thirty minutes
of reading blog posts taught me a LOT about this subject.  Here&#39;s a few
links with more detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/2015/09/building-rtl-aware-web-apps-and-websites-part-1/&#34;&gt;https://hacks.mozilla.org/2015/09/building-rtl-aware-web-apps-and-websites-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/2015/10/building-rtl-aware-web-apps-websites-part-2/&#34;&gt;https://hacks.mozilla.org/2015/10/building-rtl-aware-web-apps-websites-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I&#39;ve learned after 20 years in the industry that i18n and l10n support
is fractal: there is always more complexity that causes problems (date
and number formatting, pluralization rules and text direction are just three
examples) but I make the effort so that more people can use Sidekiq
comfortably.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This BiDi work will be part of Sidekiq 5.0.&lt;/strong&gt; If you see a problem in your
own language/locale, please open an issue or send a pull request to fix it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome, Hugo</title>
      <link>http://www.mikeperham.com/2017/03/10/welcome-hugo/</link>
      <pubDate>Fri, 10 Mar 2017 09:15:20 -0800</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/03/10/welcome-hugo/</guid>
      <description>

&lt;p&gt;I&#39;m trying out a new blogging system after using Jekyll for a few
years.&lt;/p&gt;

&lt;h2 id=&#34;a-little-history&#34;&gt;A Little History&lt;/h2&gt;

&lt;p&gt;I&#39;ve been blogging personally since 2003 or so and professionally since
2007 (when I started my Ruby career).  I started on a self-hosted
Movable Type install and migrated to self-hosted Wordpress in ~2009 but
the administrivia and complexities of those systems wore me down.  I
made the decision to wind down my own server and move to hosted
services, like GitHub Pages, after hearing about the hundredth
Wordpress security breach.  Since Ruby is my jam, I
selected Jekyll, a static site generator written in Ruby.&lt;/p&gt;

&lt;h2 id=&#34;jekyll&#34;&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; was a refreshing change because everything is flat files and
static content.  No SQL database of content, no server to administer.
For setup, you have a Gemfile with the &lt;code&gt;github-pages&lt;/code&gt; gem in it and
everything is installed for you by Bundler.&lt;/p&gt;

&lt;p&gt;All is not perfect though:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;that one gem requires &lt;strong&gt;74&lt;/strong&gt; dependent gems.&lt;/li&gt;
&lt;li&gt;I could not figure out an easy workflow for creating a post, seeing
it while I authored it despite reading the docs many times.&lt;/li&gt;
&lt;li&gt;It took 5-6 seconds to rebuild my site everytime I wanted to preview
a content change, incremental builds did not work for me.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;img img-responsive pull-right&#34; width=&#34;300&#34; src=&#34;https://gohugo.io/img/hugo.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; is a static site generator written in Go which solves many of those
problems.  Things I love so far:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Easy install with one 17MB binary by running &lt;code&gt;brew install hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fast: complete site build takes 300ms by running &lt;code&gt;hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I can preview my entire site by running &lt;code&gt;hugo server&lt;/code&gt; and livereload just magically works: I can see content changes
immediately in the browser, without even needing to hit the refresh
button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Things I don&#39;t like or I&#39;m worried about:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Lots of open issues/PRs.&lt;/li&gt;
&lt;li&gt;Large Go codebase, Go is not a terse language.&lt;/li&gt;
&lt;li&gt;Overly complex: archtetypes, taxonomies, tags are all things I don&#39;t need.
Instead of choosing one config format, they support three!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&#39;ll see how the project continues over the next few years.
I&#39;d love to see a site generator written in Crystal, a fast, higher-level language
that has most of the advantages of Go while also being more terse.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Five Years</title>
      <link>http://www.mikeperham.com/2017/02/06/five-years/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/02/06/five-years/</guid>
      <description>

&lt;p&gt;Five years ago, I published v0.5.0 of &lt;a href=&#34;http://sidekiq.org&#34;&gt;a little project&lt;/a&gt; I had great hopes for.
Here we are five years later: I&#39;ve gone from selling $50 licenses to negotiating five-figure enterprise
deals with the Fortune 500.  Five five five!&lt;/p&gt;

&lt;h1 id=&#34;gimme-five&#34;&gt;Gimme Five!&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./images/highfive.jpg&#34; alt=&#34;five&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;by-the-numbers&#34;&gt;By The Numbers&lt;/h1&gt;

&lt;p&gt;&lt;style&gt;
table {
  border-collapse: separate;
  border-spacing: 0;
  border: 1px solid #000;
}&lt;/p&gt;

&lt;p&gt;th, td, caption {
  border: 1px solid #000;
  padding: 0.3em;
}
&lt;/style&gt;
&lt;table width=&#34;100%&#34;&gt;
&lt;tr&gt;&lt;th&gt;&amp;nbsp;&lt;/th&gt;&lt;th&gt;1st Birthday&lt;/th&gt;&lt;th&gt;2nd Birthday&lt;/th&gt;&lt;th&gt;4th Birthday&lt;/th&gt;&lt;th&gt;5th Birthday&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Downloads&lt;/th&gt;&lt;td&gt;214,300&lt;/td&gt;&lt;td&gt;1,192,259&lt;/td&gt;&lt;td&gt;5,505,145&lt;/td&gt;&lt;td&gt;11,260,039&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Stars&lt;/th&gt;&lt;td&gt;2144&lt;/td&gt;&lt;td&gt;3535&lt;/td&gt;&lt;td&gt;5846&lt;/td&gt;&lt;td&gt;7087&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Closed
Issues&lt;/th&gt;&lt;td&gt;663&lt;/td&gt;&lt;td&gt;1420&lt;/td&gt;&lt;td&gt;1887&lt;/td&gt;&lt;td&gt;2378&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Forks&lt;/th&gt;&lt;td&gt;266&lt;/td&gt;&lt;td&gt;563&lt;/td&gt;&lt;td&gt;1003&lt;/td&gt;&lt;td&gt;1247&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Closed PRs&lt;/th&gt;&lt;td&gt;228&lt;/td&gt;&lt;td&gt;380&lt;/td&gt;&lt;td&gt;836&lt;/td&gt;&lt;td&gt;938&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Versions&lt;/th&gt;&lt;td&gt;44&lt;/td&gt;&lt;td&gt;74&lt;/td&gt;&lt;td&gt;110&lt;/td&gt;&lt;td&gt;127&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Customers&lt;/th&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;200&lt;/td&gt;&lt;td&gt;675&lt;/td&gt;&lt;td&gt;726&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Employees&lt;/th&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;h1 id=&#34;2016-year-in-review&#34;&gt;2016 Year in Review&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Sidekiq

&lt;ul&gt;
&lt;li&gt;Rails 5.0 support&lt;/li&gt;
&lt;li&gt;Dropped Sinatra dependency&lt;/li&gt;
&lt;li&gt;16 bug fix releases&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sidekiq Pro

&lt;ul&gt;
&lt;li&gt;timed_fetch and super_fetch algorithms&lt;/li&gt;
&lt;li&gt;17 bug fix releases&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sidekiq Enterprise

&lt;ul&gt;
&lt;li&gt;Job data encryption&lt;/li&gt;
&lt;li&gt;Multi-Process with memory monitoring&lt;/li&gt;
&lt;li&gt;Web UI authorization&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;you-want-five&#34;&gt;You Want Five?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mperham/sidekiq/issues/3301&#34;&gt;Sidekiq 5.0 beta&lt;/a&gt; is now
ready for testing in non-production environments.  The internals have
been redesigned to work better with Rails 5.0.  It no longer supports
older Rubies: Ruby 2.2.2+ only.  Read the &lt;a href=&#34;https://github.com/mperham/sidekiq/blob/5-0/5.0-Upgrade.md&#34;&gt;upgrade notes&lt;/a&gt; for more details.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;sidekiq&#39;, &#39;5.0.0.beta1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I still believe Ruby is the most fun, most flexible, highest level language
out there for building business applications and Sidekiq is the best
framework for processing business transactions.  The two are a potent
combination.&lt;/p&gt;

&lt;p&gt;Here&#39;s to another great five years!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What can I do?</title>
      <link>http://www.mikeperham.com/2017/02/01/what-can-i-do/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/02/01/what-can-i-do/</guid>
      <description>

&lt;p&gt;Like many people, I&#39;ve been shaken by the events of the last week.
I was raised to believe in freedom for all, the rule of law and the inalienable rights
guaranteed to all Americans by the Constitution.  But ultimately the law
and the Constitution are pieces of paper; it&#39;s up to every one of us to
defend those rights against their erosion.&lt;/p&gt;

&lt;p&gt;But what can I do?  Well, a couple of things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Join the millions of others and protest.&lt;/li&gt;
&lt;li&gt;Donate money to organizations which are defending our rights.&lt;/li&gt;
&lt;li&gt;Donate my technical tools to those organizations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;non-profit-licensing&#34;&gt;Non-Profit Licensing&lt;/h1&gt;

&lt;p&gt;I&#39;m offering a &lt;strong&gt;free&lt;/strong&gt; license for Sidekiq Enterprise to nation-wide 501(c)3 non-profits
whose mission is to protect our civil rights or the environment.
Please &lt;a href=&#34;mailto:mike&amp;amp;#64;contribsys.com&#34;&gt;email me&lt;/a&gt; if you are interested.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Public Relations Blast</title>
      <link>http://www.mikeperham.com/2017/01/18/public-relations-blast/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2017/01/18/public-relations-blast/</guid>
      <description>

&lt;p&gt;Apologies, dear reader, it&#39;s been a while since I blogged; I&#39;ve been busy with many
things for the last few months:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We bought a house and moved, kid started kindergarten.&lt;/li&gt;
&lt;li&gt;I rewrote Sidekiq Pro&#39;s reliable_fetch into super_fetch, feedback has been
quite good with no bugs reported and nice performance
improvements &lt;a href=&#34;https://twitter.com/scottymeuk/status/801828989258108932/&#34;&gt;noted by the Baremetrics team&lt;/a&gt;.
&lt;img src=&#34;https://pbs.twimg.com/media/CyCq4_DW8AAhViR.jpg&#34; alt=&#34;metrics&#34; /&gt;&lt;/li&gt;
&lt;li&gt;I&#39;ve pushed out 8 patch releases, trying to stabilize Sidekiq 4.2&#39;s
new Rails 5 support.  Not my finest hour, but on the positive side I wrote an
integration test suite to verify Sidekiq&#39;s job execution
functionality with Rails 4/5 dev/prod.&lt;/li&gt;
&lt;li&gt;I attended Rubyconf 2016 in Cincinnati, it was a high-quality conference as usual
from the Ruby Cental folks.&lt;/li&gt;
&lt;li&gt;I&#39;ve done 4-5 different interviews on my business and how it&#39;s grown
over the last few years.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;business&#34;&gt;Business&lt;/h2&gt;

&lt;p&gt;The last point wasn&#39;t really planned but snowballed.  I decided to
interview with IndieHackers on a lark and it turns out that several others
wanted to interview me based on my success so far.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.indiehackers.com/businesses/sidekiq&#34;&gt;IndieHackers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/podcast/tsb004-mike-perham-turning/id1171237328?i=1000377741544&amp;amp;mt=2&#34;&gt;The SaaS Bootstrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/starting-sustaining/mike-perham-interview-8e98939284a5&#34;&gt;Starting and Sustaining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://giantrobots.fm/219&#34;&gt;Thoughtbot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The net takeaway is that Sidekiq sales are going very well, revenue grew
about +75% in 2016, and Sidekiq is now the dominant background solution for Ruby, according to &lt;a href=&#34;https://infinum.co/the-capsized-eight/analyzing-rubygems-stats-v2016&#34;&gt;Infinum&#39;s Rubygems analysis&lt;/a&gt;.
&lt;img src=&#34;./images/marketshare2016.png&#34; alt=&#34;numbers&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&#39;s Next?&lt;/h2&gt;

&lt;p&gt;Sidekiq 5.0!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging stuck Ruby processes</title>
      <link>http://www.mikeperham.com/2016/08/05/debugging-stuck-ruby-processes/</link>
      <pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate>
      <author>Mike Perham</author>
      <guid>http://www.mikeperham.com/2016/08/05/debugging-stuck-ruby-processes/</guid>
      <description>

&lt;p&gt;My Ruby process has stopped doing any work, what&#39;s wrong?&lt;/p&gt;

&lt;p&gt;This is an uncommon but occasional problem for many people, especially
with large applications using lots of native extensions.&lt;/p&gt;

&lt;h2 id=&#34;step-1-thread-backtraces&#34;&gt;Step 1 - Thread backtraces&lt;/h2&gt;

&lt;p&gt;A Sidekiq process will print out the backtrace of every thread when
you send it the TTIN signal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kill -TTIN &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Side note: YMMV for other types of Ruby processes: resque, unicorn, puma, passenger, etc.  Check
the gem documentation or open an issue with the maintainers if it&#39;s not clear how to get
backtraces from your process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Reading these backtraces will tell you what your threads are doing at
that instant.  Here&#39;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016-08-04T16:16:13.535Z 96660 TID-oxpb26trs WARN: Thread TID-oxpbpcmn0
2016-08-04T16:16:13.535Z 96660 TID-oxpb26trs WARN: /Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/connection/ruby.rb:82:in `select&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/connection/ruby.rb:82:in `rescue in _read_from_socket&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/connection/ruby.rb:78:in `_read_from_socket&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/connection/ruby.rb:70:in `gets&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/connection/ruby.rb:362:in `read&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:262:in `block in read&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:250:in `io&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:261:in `read&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:120:in `block in call&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:231:in `block (2 levels) in process&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:367:in `ensure_connected&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:221:in `block in process&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:306:in `logging&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:220:in `process&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:120:in `call&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:209:in `block in call_with_timeout&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:280:in `with_socket_timeout&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis/client.rb:208:in `call_with_timeout&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis.rb:1137:in `block in _bpop&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis.rb:58:in `block in synchronize&#39;
/Users/mike/.rubies/ruby-2.3.0/lib/ruby/2.3.0/monitor.rb:214:in `mon_synchronize&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis.rb:58:in `synchronize&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis.rb:1134:in `_bpop&#39;
/Users/mike/.gem/ruby/2.3.0/gems/redis-3.3.1/lib/redis.rb:1179:in `brpop&#39;
/Users/mike/src/sidekiq/lib/sidekiq/fetch.rb:36:in `block in retrieve_work&#39;
/Users/mike/src/sidekiq/lib/sidekiq.rb:92:in `block in redis&#39;
/Users/mike/.gem/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:64:in `block (2 levels) in with&#39;
/Users/mike/.gem/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:63:in `handle_interrupt&#39;
/Users/mike/.gem/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:63:in `block in with&#39;
/Users/mike/.gem/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:60:in `handle_interrupt&#39;
/Users/mike/.gem/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:60:in `with&#39;
/Users/mike/src/sidekiq/lib/sidekiq.rb:89:in `redis&#39;
/Users/mike/src/sidekiq/lib/sidekiq/fetch.rb:36:in `retrieve_work&#39;
/Users/mike/src/sidekiq/lib/sidekiq/processor.rb:86:in `get_one&#39;
/Users/mike/src/sidekiq/lib/sidekiq/processor.rb:96:in `fetch&#39;
/Users/mike/src/sidekiq/lib/sidekiq/processor.rb:79:in `process_one&#39;
/Users/mike/src/sidekiq/lib/sidekiq/processor.rb:68:in `run&#39;
/Users/mike/src/sidekiq/lib/sidekiq/util.rb:17:in `watchdog&#39;
/Users/mike/src/sidekiq/lib/sidekiq/util.rb:25:in `block in safe_thread&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Backtraces look like a big, scary blob of text because they are!  Reading
a backtrace is hard and a learned skill: &lt;strong&gt;you will get better at it over
time&lt;/strong&gt;.  Pop open a gem with &lt;code&gt;bundle open &amp;lt;gemname&amp;gt;&lt;/code&gt; and navigate to the
line in the backtrace; getting comfortable with the code in the various
gems will help your debugging skills a lot.  The key line is here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Users/mike/src/sidekiq/lib/sidekiq/fetch.rb:36:in `block in retrieve_work&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a quiet Sidekiq thread that is waiting for a job from Redis.  It&#39;s paused,
doing nothing, but that&#39;s perfectly normal.&lt;/p&gt;

&lt;p&gt;Most often with stuck processes you&#39;ll see threads paused in the mysql or
postgresql driver, waiting on query results or waiting for a lock.&lt;/p&gt;

&lt;h2 id=&#34;step-2-gdb&#34;&gt;Step 2 - GDB&lt;/h2&gt;

&lt;p&gt;If the Sidekiq process doesn&#39;t output anything when you send it a TTIN
signal, that&#39;s a sign you&#39;ve got a deeper problem.  Almost always the
cause is a native extension gem which is performing a long operation
without releasing the GVL.&lt;/p&gt;

&lt;p&gt;This means Ruby can&#39;t help - we have to drop down into the bowels of
the process to understand what is wrong using the GDB debugger.  You can attach
GDB to a running process like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gdb /path/to/ruby/binary [PID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to get the thread backtraces dumped to a text file, run these
commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) set logging file gdb_output.txt
(gdb) set logging on
(gdb) set height 10000
(gdb) t a a bt
(gdb) quit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Sidekiq Enterprise customer recently sent me a GDB dump that I will
use as an example.  Here&#39;s the first thread:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Thread 32 (Thread 0x3703 of process 40990):
#0  0x00007fff94b87db6 in __psynch_cvwait () from /usr/lib/system/libsystem_kernel.dylib
#1  0x00007fff98cab728 in _pthread_cond_wait () from /usr/lib/system/libsystem_pthread.dylib
#2  0x0000000102dbd5b3 in gvl_acquire_common ()
#3  0x0000000102db7471 in rb_thread_call_without_gvl ()
#4  0x00000001031feda1 in rsock_ipaddr () from /Users/user/.rbenv/versions/2.2.4/lib/ruby/2.2.0/x86_64-darwin15/socket.bundle
#5  0x00000001031f5c4a in sock_s_getaddrinfo () from /Users/user/.rbenv/versions/2.2.4/lib/ruby/2.2.0/x86_64-darwin15/socket.bundle
#6  0x0000000102dadee3 in vm_call_cfunc ()
#7  0x0000000102d927c9 in vm_exec_core ()
#8  0x0000000102da16d6 in vm_exec ()
#9  0x0000000102da6b03 in invoke_block_from_c ()
#10 0x0000000102d9da80 in rb_yield ()
#11 0x0000000102dbbf0c in rb_thread_s_handle_interrupt ()
#12 0x0000000102dadee3 in vm_call_cfunc ()
#13 0x0000000102d925f4 in vm_exec_core ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is a C-level backtrace.  We&#39;re lower-level and have less
info available but experience helps fill in the gaps.  The thread is
calling &lt;code&gt;sock_s_getaddrinfo&lt;/code&gt; which is a DNS lookup.  It looks like it
has finished the DNS lookup and is now calling &lt;code&gt;gvl_acquire_common&lt;/code&gt; to
get the GVL in order to continue executing Ruby code.  It is normal
for some threads to block, waiting for the GVL, but it is not normal for
most threads to be waiting for the GVL. This was the case: dozens of
threads were blocked with that exact same backtrace.&lt;/p&gt;

&lt;p&gt;When this happens, look for the odd threads.  20+ threads were blocked with the same
backtrace as above - you can ignore those.  But one or more threads will be
doing something else, and indeed there was this backtrace which was
completely different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Thread 10 (Thread 0x2103 of process 40990):
#0  0x00007fff94b892a2 in poll () from /usr/lib/system/libsystem_kernel.dylib
#1  0x00000001035c892d in pqSocketCheck () from /usr/local/opt/postgresql/lib/libpq.5.dylib
#2  0x00000001035c87f9 in pqWaitTimed () from /usr/local/opt/postgresql/lib/libpq.5.dylib
#3  0x00000001035c5fd8 in PQgetResult () from /usr/local/opt/postgresql/lib/libpq.5.dylib
#4  0x00000001035c62be in PQexecFinish () from /usr/local/opt/postgresql/lib/libpq.5.dylib
#5  0x00000001035c31bc in PQsetClientEncoding () from /usr/local/opt/postgresql/lib/libpq.5.dylib
#6  0x000000010359d2a7 in pgconn_set_default_encoding () from /Users/user/.rbenv/versions/2.2.4/gemsets/xxx-v1.1/extensions/x86_64-darwin-15/2.2.0-static/pg-0.18.4/pg_ext.bundle
#7  0x00000001035990b7 in pgconn_init () from /Users/user/.rbenv/versions/2.2.4/gemsets/xxx-v1.1/extensions/x86_64-darwin-15/2.2.0-static/pg-0.18.4/pg_ext.bundle
#8  0x0000000102daa929 in vm_call0_body ()
#9  0x0000000102da9d82 in rb_call0 ()
#10 0x0000000102cbc969 in rb_class_new_instance ()
#11 0x0000000102dadee3 in vm_call_cfunc ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the long pathnames at the end of the middle lines - they indicate
we&#39;re executing within a native extension: the &lt;code&gt;pg&lt;/code&gt; gem which then calls
into &lt;code&gt;libpq&lt;/code&gt;, postgresql&#39;s native C API.  The &lt;code&gt;pg&lt;/code&gt; gem is calling &lt;code&gt;PQsetClientEncoding&lt;/code&gt;
which looks like it is making a network call since I see terms like &amp;quot;Socket&amp;quot; and &amp;quot;poll&amp;quot;.&lt;/p&gt;

&lt;p&gt;Now we find the root issue: there&#39;s no GVL release in the backtrace.  MRI&#39;s API is
excellent in this regard: you should see &lt;code&gt;rb_thread_call_without_gvl&lt;/code&gt; in
the backtrace to indicate that the thread is not holding the GVL.
Until that network call finishes, the entire process is locked up and
can&#39;t do anything.  Most of the time you won&#39;t notice because the network is
usually pretty fast but in the case where the network is stalled, work
grinds to a halt.&lt;/p&gt;

&lt;p&gt;All of this assumes you can use GDB in your production environment.  If you&#39;re on
Heroku or a similar PaaS, try to reproduce the issue on your local machine or a
Linux VM.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Performing a network operation while holding the GVL is a huge bug and should be fixed.
This is a current &lt;a href=&#34;https://bitbucket.org/ged/ruby-pg/issues/245/pg-0184&#34;&gt;pg bug in &amp;lt;= 0.18.4&lt;/a&gt;, filed and acknowledged.&lt;/p&gt;

&lt;p&gt;Getting thread dumps from a stuck process is critical to diagnosing the root cause.
Reading and understanding those backtraces, both in Ruby and in GDB, is a useful skill to have
when debugging issues.  As you read more code, you&#39;ll get better and
faster at diagnosing problems.  It took me about 30 seconds to determine
the problem in the GDB dump above.&lt;/p&gt;

&lt;p&gt;If you are a Sidekiq Pro or Enterprise customer and seeing stuck processes, don&#39;t be
afraid to gist me your GDB dumps - I&#39;d be happy to help diagnose.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
